\relax 
\babel@aux{english}{}
\citation{proceduralprogramming}
\citation{turingmachine}
\citation{java}
\citation{Turner}
\citation{sep-church-turing}
\citation{Pressman:2004:SEP:994110}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction: Software paradigms and complexity}{3}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{introduction}{{1}{3}}
\citation{Pressman:2004:SEP:994110}
\citation{defectloc}
\citation{bergklaas}
\citation{chidamber}
\citation{euguenkiss}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Related Work}{5}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{relatedwork}{{2}{5}}
\citation{tiobe}
\citation{reactisfrp}
\citation{popularityreact}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Theory}{7}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{theory}{{3}{7}}
\citation{wikipedia_pure}
\citation{Gamma:1995:DPE:186897}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Characteristics of Functional Programming}{8}}
\newlabel{functionalprogramming}{{3.1}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}Sum types and product types}{9}}
\newlabel{types}{{3.1.1}{9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.2}Type classes}{10}}
\newlabel{typeclass}{{3.1.2}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces Equality type class in Haskell.\relax }}{10}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{equalitytypeclass}{{3.1}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces A function that prints a text if the two items are equal.\relax }}{10}}
\newlabel{printifequal}{{3.2}{10}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.3}Brief introduction to Monads for side effects}{10}}
\newlabel{monads}{{3.1.3}{10}}
\citation{interpreterpattern}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces Monad type class in Haskell.\relax }}{11}}
\newlabel{monadclass}{{3.3}{11}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.4}Interpreter pattern for testability}{11}}
\newlabel{interpreterpattern}{{3.1.4}{11}}
\citation{commentarycompiler}
\citation{commentarycompiler}
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces AST for a to-do-list. We can derive a functor instances from ASTs for deriving Free instances.~\cite  {commentarycompiler}\relax }}{12}}
\newlabel{freeunion}{{3.4}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.5}Using MTL for the interpreter pattern}{12}}
\newlabel{mtl}{{3.1.5}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces Example of a function that, given the ID of a user, generates a unique token that can be used for authentication.\relax }}{13}}
\newlabel{tokennaive}{{3.5}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces An implementation of the token generation following MTL and interpreter pattern.\relax }}{14}}
\newlabel{tokencorrect}{{3.6}{14}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}SOLID principles}{14}}
\newlabel{oop}{{3.2}{14}}
\newlabel{introduction}{{3.2}{14}}
\citation{martinrobert}
\citation{defectloc}
\citation{McCabe}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Measuring testability and complexity}{16}}
\newlabel{measuretestability}{{3.3}{16}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Measuring testability: Cyclomatic Complexity}{16}}
\newlabel{cyclomaticcomplexity}{{3.3.1}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces Multi if function foo.\relax }}{17}}
\newlabel{c1excode}{{3.7}{17}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.8}{\ignorespaces Cyclomatic complexity graph for Figure~\ref  {c1excode}\relax }}{17}}
\newlabel{fig:c1exgraph}{{3.8}{17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}Cyclomatic Complexity in Functional Programming}{18}}
\citation{bergklaas}
\@writefile{lof}{\contentsline {figure}{\numberline {3.9}{\ignorespaces Recursively split a list into two based on a given condition in Haskell. For example \texttt  {split (>3) [1,2,3,4,5] = ([4,5],[1,2,3])}.\relax }}{19}}
\newlabel{split}{{3.9}{19}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.10}{\ignorespaces Flowgraph for split function, defined in Figure~\ref  {split}.\relax }}{19}}
\newlabel{fig:cyclomaticfunctional}{{3.10}{19}}
\citation{GREEN1996131}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Mental complexity: Cognitive Dimensions}{20}}
\newlabel{cognitivedimensions}{{3.3.3}{20}}
\citation{euguenkiss}
\citation{java}
\citation{haskell}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Method: Case studies}{22}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces An example of the interaction in the chess game.\relax }}{23}}
\newlabel{chessexample}{{4.1}{23}}
\bibstyle{ieeetr}
\bibdata{thesis}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}Results}{25}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{results}{{5}{25}}
\@writefile{toc}{\contentsline {section}{\numberline {5.1}Limitations}{25}}
\newlabel{limitations}{{5.1}{25}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.1}Improvements to implementation}{25}}
\@writefile{toc}{\contentsline {section}{\numberline {5.2}future work}{25}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.1}Relations to cardinality}{25}}
\bibcite{proceduralprogramming}{1}
\bibcite{turingmachine}{2}
\bibcite{java}{3}
\bibcite{Turner}{4}
\bibcite{sep-church-turing}{5}
\bibcite{Pressman:2004:SEP:994110}{6}
\bibcite{defectloc}{7}
\bibcite{bergklaas}{8}
\bibcite{chidamber}{9}
\bibcite{euguenkiss}{10}
\bibcite{tiobe}{11}
\bibcite{reactisfrp}{12}
\bibcite{popularityreact}{13}
\bibcite{wikipedia_pure}{14}
\bibcite{Gamma:1995:DPE:186897}{15}
\bibcite{interpreterpattern}{16}
\bibcite{commentarycompiler}{17}
\bibcite{martinrobert}{18}
\bibcite{McCabe}{19}
\bibcite{GREEN1996131}{20}
\bibcite{haskell}{21}
