\relax 
\babel@aux{english}{}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Software paradigms and complexity}{3}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Objective}{3}}
\citation{tiobe}
\citation{reactisfrp}
\citation{popularityreact}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Definitions}{4}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{theory}{{2}{4}}
\citation{wikipedia_pure}
\citation{Gamma:1995:DPE:186897}
\citation{interpreterpattern}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Characteristics of Functional Programming}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Interpreter pattern for testability}{5}}
\citation{commentarycompiler}
\citation{commentarycompiler}
\newlabel{freeunion}{{2.1.1}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces AST for a to-do-list. We can derive a functor instances from ASTs for deriving Free instances.~\cite  {commentarycompiler}}}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}Extending applications with Free Monads}{6}}
\newmarginnote{note.10.1}{{10}{6038827sp}}
\citation{commentarycompiler}
\newlabel{freefunctor}{{2.1.2}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces A Functor instance for Figure~\ref  {freeunion}. This can automatically be derived using DeriveFunctor.}}{7}}
\citation{Gamma:1995:DPE:186897}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces An example implementation for our To-do list data type defined in Figure~\ref  {freeunion}. Requires the haskell package ``free'' (\url {hackage.haskell.org/package/free-5.1})}}{8}}
\newlabel{freeprogram}{{2.3}{8}}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Object Oriented Programming}{9}}
\newlabel{oop}{{2.2}{9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}SOLID principles}{9}}
\citation{martinrobert}
\citation{defectloc}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Measuring testability and complexity}{12}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{methods}{{3}{12}}
\citation{McCabe}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Measuring testability: Cyclomatic Complexity}{13}}
\newlabel{cyclomaticcomplexity}{{3.1}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces Multi if function foo.}}{13}}
\newlabel{c1excode}{{3.1}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces Cyclomatic complexity graph for Figure~\ref  {c1excode}}}{14}}
\newlabel{fig:c1exgraph}{{3.2}{14}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Cyclomatic Complexity in Functional Programming}{14}}
\citation{bergklaas}
\newlabel{split}{{3.2}{15}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces Recursively split a list into two based on a given condition in Haskell. For example \texttt  {split (>3) [1,2,3,4,5] = ([4,5],[1,2,3])}.}}{15}}
\newlabel{fig:cyclomaticfunctional}{{3.2}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces Flowgraph for split function, defined in Figure~\ref  {split}.}}{16}}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Mental complexity: Cognitive Dimensions}{16}}
\newlabel{cognitivedimensions}{{3.3}{16}}
\citation{GREEN1996131}
\citation{euguenkiss}
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Case studies}{19}}
\newlabel{chessexample}{{3.4}{20}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces An example of the interaction in the chess game.}}{20}}
\bibstyle{ieeetr}
\bibdata{thesis}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Results}{22}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{results}{{4}{22}}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Limitations}{22}}
\newlabel{limitations}{{4.1}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.1}Improvements to implementation}{22}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}future work}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.1}Relations to cardinality}{22}}
\bibcite{tiobe}{1}
\bibcite{reactisfrp}{2}
\bibcite{popularityreact}{3}
\bibcite{wikipedia_pure}{4}
\bibcite{Gamma:1995:DPE:186897}{5}
\bibcite{interpreterpattern}{6}
\bibcite{commentarycompiler}{7}
\bibcite{martinrobert}{8}
\bibcite{defectloc}{9}
\bibcite{McCabe}{10}
\bibcite{bergklaas}{11}
\bibcite{GREEN1996131}{12}
\bibcite{euguenkiss}{13}
