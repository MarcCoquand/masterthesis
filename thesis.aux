\relax 
\babel@aux{english}{}
\citation{proceduralprogramming}
\citation{turingmachine}
\citation{java}
\citation{Turner}
\citation{sep-church-turing}
\citation{Pressman:2004:SEP:994110}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction: Software paradigms and complexity}{4}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{introduction}{{1}{4}}
\citation{Pressman:2004:SEP:994110}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Background}{6}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{background}{{2}{6}}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Architecture}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Unit testing}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}Property-based testing}{7}}
\citation{googleontests}
\citation{spotifyontests}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.3}Integration testing}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.4}End-2-End Tests}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.5}Challenges}{8}}
\@writefile{toc}{\contentsline {subsubsection}{Readability}{8}}
\citation{defectloc}
\citation{bergklaas}
\citation{chidamber}
\citation{euguenkiss}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Complexity and relation to testability}{9}}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Theory}{10}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{theory}{{3}{10}}
\citation{wikipedia_pure}
\citation{Gamma:1995:DPE:186897}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Characteristics of Functional Programming}{11}}
\newlabel{functionalprogramming}{{3.1}{11}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}ADTs: Sum types and product types}{12}}
\newlabel{types}{{3.1.1}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.2}GADT}{13}}
\newlabel{gadt}{{3.1.2}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces A Calculator GADT with two operations add and multiply.\relax }}{13}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{gadtcalculator}{{3.1}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces A mathematical expression constructed using the GADT in figure~\ref  {gadtcalculator}\relax }}{13}}
\newlabel{mathexpressiongadt}{{3.2}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces Evaluator for the calculator\relax }}{13}}
\newlabel{calculator}{{3.3}{13}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.3}Type classes}{13}}
\newlabel{typeclass}{{3.1.3}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces Equality type class in Haskell.\relax }}{14}}
\newlabel{equalitytypeclass}{{3.4}{14}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces A function that prints a text if the two items are equal.\relax }}{14}}
\newlabel{printifequal}{{3.5}{14}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.4}Brief introduction to Monads for side effects}{14}}
\newlabel{monads}{{3.1.4}{14}}
\citation{interpreterpattern}
\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces Monad type class in Haskell.\relax }}{15}}
\newlabel{monadclass}{{3.6}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.5}Interpreter pattern for testability}{15}}
\newlabel{interpreterpattern}{{3.1.5}{15}}
\citation{commentarycompiler}
\citation{commentarycompiler}
\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces AST for a to-do-list. We can derive a functor instances from ASTs for deriving Free instances.~\cite  {commentarycompiler}\relax }}{16}}
\newlabel{freeunion}{{3.7}{16}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.6}Using MTL for the interpreter pattern}{16}}
\newlabel{mtl}{{3.1.6}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.8}{\ignorespaces Example of a function that, given the ID of a user, generates a unique token that can be used for authentication.\relax }}{17}}
\newlabel{tokennaive}{{3.8}{17}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.9}{\ignorespaces An implementation of the token generation following MTL and interpreter pattern.\relax }}{18}}
\newlabel{tokencorrect}{{3.9}{18}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}SOLID principles}{18}}
\newlabel{oop}{{3.2}{18}}
\citation{martinrobert}
\citation{defectloc}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Measuring testability and complexity}{20}}
\newlabel{measuretestability}{{3.3}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Measuring testability: Cyclomatic Complexity}{20}}
\newlabel{cyclomaticcomplexity}{{3.3.1}{20}}
\citation{McCabe}
\@writefile{lof}{\contentsline {figure}{\numberline {3.10}{\ignorespaces Multi if function foo.\relax }}{21}}
\newlabel{c1excode}{{3.10}{21}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.11}{\ignorespaces Cyclomatic complexity graph for Figure~\ref  {c1excode}\relax }}{22}}
\newlabel{fig:c1exgraph}{{3.11}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}Cyclomatic Complexity in Functional Programming}{22}}
\citation{bergklaas}
\@writefile{lof}{\contentsline {figure}{\numberline {3.12}{\ignorespaces Recursively split a list into two based on a given condition in Haskell. For example \texttt  {split (>3) [1,2,3,4,5] = ([4,5],[1,2,3])}.\relax }}{23}}
\newlabel{split}{{3.12}{23}}
\citation{GREEN1996131}
\@writefile{lof}{\contentsline {figure}{\numberline {3.13}{\ignorespaces Flowgraph for split function, defined in Figure~\ref  {split}.\relax }}{24}}
\newlabel{fig:cyclomaticfunctional}{{3.13}{24}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Mental complexity: Cognitive Dimensions}{24}}
\newlabel{cognitivedimensions}{{3.3.3}{24}}
\citation{euguenkiss}
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Functional servers}{26}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.1}RESTful servers}{26}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.2}Implementation concerns for REST apis}{28}}
\@writefile{toc}{\contentsline {section}{\numberline {3.5}Formal implementation of a server in functional programs}{28}}
\@writefile{toc}{\contentsline {section}{\numberline {3.6}Cause, a functional REST framework}{29}}
\citation{java}
\citation{haskell}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Method: Case studies}{31}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces An example of the interaction in the chess game.\relax }}{32}}
\newlabel{chessexample}{{4.1}{32}}
\bibstyle{ieeetr}
\bibdata{thesis}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}Results}{34}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{results}{{5}{34}}
\@writefile{toc}{\contentsline {section}{\numberline {5.1}Limitations}{34}}
\newlabel{limitations}{{5.1}{34}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.1}Improvements to implementation}{34}}
\@writefile{toc}{\contentsline {section}{\numberline {5.2}future work}{34}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.1}Relations to cardinality}{34}}
\bibcite{proceduralprogramming}{1}
\bibcite{turingmachine}{2}
\bibcite{java}{3}
\bibcite{Turner}{4}
\bibcite{sep-church-turing}{5}
\bibcite{Pressman:2004:SEP:994110}{6}
\bibcite{googleontests}{7}
\bibcite{spotifyontests}{8}
\bibcite{defectloc}{9}
\bibcite{bergklaas}{10}
\bibcite{chidamber}{11}
\bibcite{euguenkiss}{12}
\bibcite{wikipedia_pure}{13}
\bibcite{Gamma:1995:DPE:186897}{14}
\bibcite{interpreterpattern}{15}
\bibcite{commentarycompiler}{16}
\bibcite{martinrobert}{17}
\bibcite{McCabe}{18}
\bibcite{GREEN1996131}{19}
\bibcite{haskell}{20}
