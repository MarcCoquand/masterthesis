\relax 
\babel@aux{english}{}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction: Software paradigms and complexity}{3}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\citation{tiobe}
\citation{reactisfrp}
\citation{popularityreact}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Theory}{4}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{theory}{{2}{4}}
\citation{wikipedia_pure}
\citation{Gamma:1995:DPE:186897}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Characteristics of Functional Programming}{5}}
\newlabel{functionalprogramming}{{2.1}{5}}
\citation{interpreterpattern}
\citation{commentarycompiler}
\citation{commentarycompiler}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Interpreter pattern for testability}{6}}
\newlabel{interpreterpattern}{{2.1.1}{6}}
\citation{commentarycompiler}
\newlabel{freeunion}{{2.1.1}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces AST for a to-do-list. We can derive a functor instances from ASTs for deriving Free instances.~\cite  {commentarycompiler}}}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}Extending applications with Free Monads}{7}}
\newmarginnote{note.11.1}{{11}{6038827sp}}
\newlabel{freefunctor}{{2.1.2}{8}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces A Functor instance for Figure~\ref  {freeunion}. This can automatically be derived using DeriveFunctor.}}{8}}
\citation{Gamma:1995:DPE:186897}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces An example implementation for our To-do list data type defined in Figure~\ref  {freeunion}. Requires the haskell package ``free'' (\url {hackage.haskell.org/package/free-5.1})}}{9}}
\newlabel{freeprogram}{{2.3}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Object Oriented Programming}{10}}
\newlabel{oop}{{2.2}{10}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}SOLID principles}{10}}
\citation{martinrobert}
\citation{defectloc}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Measuring testability and complexity}{11}}
\newlabel{measuretestability}{{2.3}{11}}
\citation{McCabe}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Measuring testability: Cyclomatic Complexity}{12}}
\newlabel{cyclomaticcomplexity}{{2.3.1}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Multi if function foo.}}{13}}
\newlabel{c1excode}{{2.4}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.5}{\ignorespaces Cyclomatic complexity graph for Figure~\ref  {c1excode}}}{13}}
\newlabel{fig:c1exgraph}{{2.5}{13}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.2}Cyclomatic Complexity in Functional Programming}{13}}
\newlabel{split}{{2.3.2}{14}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.6}{\ignorespaces Recursively split a list into two based on a given condition in Haskell. For example \texttt  {split (>3) [1,2,3,4,5] = ([4,5],[1,2,3])}.}}{14}}
\citation{bergklaas}
\newlabel{fig:cyclomaticfunctional}{{2.3.2}{15}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.7}{\ignorespaces Flowgraph for split function, defined in Figure~\ref  {split}.}}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.3}Mental complexity: Cognitive Dimensions}{15}}
\newlabel{cognitivedimensions}{{2.3.3}{15}}
\citation{GREEN1996131}
\citation{euguenkiss}
\citation{java}
\citation{haskell}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Method: Case studies}{19}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chessexample}{{3}{20}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces An example of the interaction in the chess game.}}{20}}
\bibstyle{ieeetr}
\bibdata{thesis}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Results}{22}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{results}{{4}{22}}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Limitations}{22}}
\newlabel{limitations}{{4.1}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.1}Improvements to implementation}{22}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}future work}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.1}Relations to cardinality}{22}}
\bibcite{tiobe}{1}
\bibcite{reactisfrp}{2}
\bibcite{popularityreact}{3}
\bibcite{wikipedia_pure}{4}
\bibcite{Gamma:1995:DPE:186897}{5}
\bibcite{interpreterpattern}{6}
\bibcite{commentarycompiler}{7}
\bibcite{martinrobert}{8}
\bibcite{defectloc}{9}
\bibcite{McCabe}{10}
\bibcite{bergklaas}{11}
\bibcite{GREEN1996131}{12}
\bibcite{euguenkiss}{13}
\bibcite{java}{14}
\bibcite{haskell}{15}
